
// 3月10日实验1View.cpp : CMy3月10日实验1View 类的实现
//

#include "stdafx.h"
// SHARED_HANDLERS 可以在实现预览、缩略图和搜索筛选器句柄的
// ATL 项目中进行定义，并允许与该项目共享文档代码。
#ifndef SHARED_HANDLERS
#include "3月10日实验1.h"
#endif

#include "3月10日实验1Doc.h"
#include "3月10日实验1View.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMy3月10日实验1View

IMPLEMENT_DYNCREATE(CMy3月10日实验1View, CView)

BEGIN_MESSAGE_MAP(CMy3月10日实验1View, CView)
	// 标准打印命令
	ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &CView::OnFilePrintPreview)
	ON_WM_LBUTTONDOWN()
END_MESSAGE_MAP()

// CMy3月10日实验1View 构造/析构

CMy3月10日实验1View::CMy3月10日实验1View()
{
	// TODO: 在此处添加构造代码

}

CMy3月10日实验1View::~CMy3月10日实验1View()
{
}

BOOL CMy3月10日实验1View::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: 在此处通过修改
	//  CREATESTRUCT cs 来修改窗口类或样式

	return CView::PreCreateWindow(cs);
}

// CMy3月10日实验1View 绘制

void CMy3月10日实验1View::OnDraw(CDC* /*pDC*/)
{
	CMy3月10日实验1Doc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	// TODO: 在此处为本机数据添加绘制代码
}


// CMy3月10日实验1View 打印

BOOL CMy3月10日实验1View::OnPreparePrinting(CPrintInfo* pInfo)
{
	// 默认准备
	return DoPreparePrinting(pInfo);
}

void CMy3月10日实验1View::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 添加额外的打印前进行的初始化过程
}

void CMy3月10日实验1View::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 添加打印后进行的清理过程
}


// CMy3月10日实验1View 诊断

#ifdef _DEBUG
void CMy3月10日实验1View::AssertValid() const
{
	CView::AssertValid();
}

void CMy3月10日实验1View::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

CMy3月10日实验1Doc* CMy3月10日实验1View::GetDocument() const // 非调试版本是内联的
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CMy3月10日实验1Doc)));
	return (CMy3月10日实验1Doc*)m_pDocument;
}
#endif //_DEBUG


// CMy3月10日实验1View 消息处理程序


void CMy3月10日实验1View::OnLButtonDown(UINT nFlags, CPoint point)
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值
	//第（1）题画圆
	int r;
	CRect cr;
	this->GetClientRect(&cr);
	//dc.Ellipse(cr);
	if (cr.bottom - cr.top>cr.right - cr.left)
		r = (cr.right - cr.left) / 2;
	else
		r = (cr.bottom + cr.top) / 2;
	CClientDC dc(this);
	dc.Ellipse((cr.right - cr.left) / 2 - r, (cr.bottom - cr.top) / 2 - r, (cr.right - cr.left) / 2 + r, (cr.bottom - cr.top) / 2 + r);


	CView::OnLButtonDown(nFlags, point);
}
